package orwashere.speedment.dao.sampledb.sampledb.sampledb.contacts.impl;

import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;
import orwashere.speedment.dao.sampledb.sampledb.sampledb.contacts.Contacts;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'sampledb.sampledb.sampledb.contacts'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class ContactsImpl extends AbstractBaseEntity<Contacts> implements Contacts {
    
    private Integer id;
    private String firstname;
    private String lastname;
    private String telephone;
    private String email;
    private Timestamp created;
    
    ContactsImpl(Speedment speedment) {
        super(speedment);
    }
    
    public ContactsImpl(Speedment speedment, final Contacts contacts) {
        super(speedment);
        setId(contacts.getId());
        contacts.getFirstname().ifPresent(this::setFirstname);
        contacts.getLastname().ifPresent(this::setLastname);
        contacts.getTelephone().ifPresent(this::setTelephone);
        contacts.getEmail().ifPresent(this::setEmail);
        setCreated(contacts.getCreated());
    }
    
    @Override
    public Integer getId() {
        return id;
    }
    
    @Override
    public Optional<String> getFirstname() {
        return Optional.ofNullable(firstname);
    }
    
    @Override
    public Optional<String> getLastname() {
        return Optional.ofNullable(lastname);
    }
    
    @Override
    public Optional<String> getTelephone() {
        return Optional.ofNullable(telephone);
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public Timestamp getCreated() {
        return created;
    }
    
    @Override
    public final ContactsImpl setId(Integer id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final ContactsImpl setFirstname(String firstname) {
        this.firstname = firstname;
        return this;
    }
    
    @Override
    public final ContactsImpl setLastname(String lastname) {
        this.lastname = lastname;
        return this;
    }
    
    @Override
    public final ContactsImpl setTelephone(String telephone) {
        this.telephone = telephone;
        return this;
    }
    
    @Override
    public final ContactsImpl setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public final ContactsImpl setCreated(Timestamp created) {
        this.created = created;
        return this;
    }
    
    @Override
    public Contacts copy() {
        return new ContactsImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("firstname = "+Objects.toString(getFirstname().orElse(null)));
        sj.add("lastname = "+Objects.toString(getLastname().orElse(null)));
        sj.add("telephone = "+Objects.toString(getTelephone().orElse(null)));
        sj.add("email = "+Objects.toString(getEmail().orElse(null)));
        sj.add("created = "+Objects.toString(getCreated()));
        return "ContactsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Contacts)) { return false; }
        @SuppressWarnings("unchecked")
        final Contacts thatContacts = (Contacts)that;
        if (!Objects.equals(this.getId(), thatContacts.getId())) {return false; }
        if (!Objects.equals(this.getFirstname(), thatContacts.getFirstname())) {return false; }
        if (!Objects.equals(this.getLastname(), thatContacts.getLastname())) {return false; }
        if (!Objects.equals(this.getTelephone(), thatContacts.getTelephone())) {return false; }
        if (!Objects.equals(this.getEmail(), thatContacts.getEmail())) {return false; }
        if (!Objects.equals(this.getCreated(), thatContacts.getCreated())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getFirstname());
        hash = 31 * hash + Objects.hashCode(getLastname());
        hash = 31 * hash + Objects.hashCode(getTelephone());
        hash = 31 * hash + Objects.hashCode(getEmail());
        hash = 31 * hash + Objects.hashCode(getCreated());
        return hash;
    }
    
    @Override
    public Class<Contacts> getEntityClass_() {
        return Contacts.class;
    }
}