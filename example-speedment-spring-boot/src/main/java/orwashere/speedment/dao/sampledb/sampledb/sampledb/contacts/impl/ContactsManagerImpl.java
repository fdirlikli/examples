package orwashere.speedment.dao.sampledb.sampledb.sampledb.contacts.impl;

import com.speedment.Speedment;
import com.speedment.component.ProjectComponent;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.TimestampIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import javax.annotation.Generated;
import orwashere.speedment.dao.sampledb.sampledb.sampledb.contacts.Contacts;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the Table 'sampledb.sampledb.sampledb.contacts'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class ContactsManagerImpl extends AbstractSqlManager<Contacts> {
    
    private final TypeMapper<Integer, Integer> idTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> firstnameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> lastnameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> telephoneTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> emailTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Timestamp, Timestamp> createdTypeMapper = new TimestampIdentityMapper();
    
    public ContactsManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Contacts> getEntityClass() {
        return Contacts.class;
    }
    
    @Override
    public Object get(Contacts entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "firstname" : return entity.getFirstname();
            case "lastname" : return entity.getLastname();
            case "telephone" : return entity.getTelephone();
            case "email" : return entity.getEmail();
            case "created" : return entity.getCreated();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Contacts entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Integer) value); break;
            case "firstname" : entity.setFirstname((String) value); break;
            case "lastname" : entity.setLastname((String) value); break;
            case "telephone" : entity.setTelephone((String) value); break;
            case "email" : entity.setEmail((String) value); break;
            case "created" : entity.setCreated((Timestamp) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.get(ProjectComponent.class).getProject().findTableByName("sampledb.sampledb.contacts");
    }
    
    protected Contacts defaultReadEntity(ResultSet resultSet) {
        final Contacts entity = newInstance();
        try {
            entity.setId(idTypeMapper.toJavaType(resultSet.getInt("id")));
            entity.setFirstname(firstnameTypeMapper.toJavaType(resultSet.getString("firstname")));
            entity.setLastname(lastnameTypeMapper.toJavaType(resultSet.getString("lastname")));
            entity.setTelephone(telephoneTypeMapper.toJavaType(resultSet.getString("telephone")));
            entity.setEmail(emailTypeMapper.toJavaType(resultSet.getString("email")));
            entity.setCreated(createdTypeMapper.toJavaType(resultSet.getTimestamp("created")));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Contacts newInstance() {
        return new ContactsImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Contacts entity) {
        return entity.getId();
    }
}