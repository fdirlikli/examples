package orwashere.speedment.dao.sampledb.sampledb.sampledb.contacts;

import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.sql.Timestamp;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table
 * 'sampledb.sampledb.sampledb.contacts'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Contacts extends Entity<Contacts> {
    
    /**
     * This Field corresponds to the {@link Contacts} field that can be obtained
     * using the {@link Contacts#getId()} method.
     */
    public final static ComparableField<Contacts, Integer> ID = new ComparableFieldImpl<>("id", Contacts::getId, Contacts::setId);
    /**
     * This Field corresponds to the {@link Contacts} field that can be obtained
     * using the {@link Contacts#getFirstname()} method.
     */
    public final static StringField<Contacts> FIRSTNAME = new StringFieldImpl<>("firstname", o -> o.getFirstname().orElse(null), Contacts::setFirstname);
    /**
     * This Field corresponds to the {@link Contacts} field that can be obtained
     * using the {@link Contacts#getLastname()} method.
     */
    public final static StringField<Contacts> LASTNAME = new StringFieldImpl<>("lastname", o -> o.getLastname().orElse(null), Contacts::setLastname);
    /**
     * This Field corresponds to the {@link Contacts} field that can be obtained
     * using the {@link Contacts#getTelephone()} method.
     */
    public final static StringField<Contacts> TELEPHONE = new StringFieldImpl<>("telephone", o -> o.getTelephone().orElse(null), Contacts::setTelephone);
    /**
     * This Field corresponds to the {@link Contacts} field that can be obtained
     * using the {@link Contacts#getEmail()} method.
     */
    public final static StringField<Contacts> EMAIL = new StringFieldImpl<>("email", o -> o.getEmail().orElse(null), Contacts::setEmail);
    /**
     * This Field corresponds to the {@link Contacts} field that can be obtained
     * using the {@link Contacts#getCreated()} method.
     */
    public final static ComparableField<Contacts, Timestamp> CREATED = new ComparableFieldImpl<>("created", Contacts::getCreated, Contacts::setCreated);
    
    /**
     * Returns the id of this Contacts. The id field corresponds to the database
     * column sampledb.sampledb.contacts.id.
     * 
     * @return the id of this Contacts
     */
    Integer getId();
    
    /**
     * Returns the firstname of this Contacts. The firstname field corresponds to
     * the database column sampledb.sampledb.contacts.firstname.
     * 
     * @return the firstname of this Contacts
     */
    Optional<String> getFirstname();
    
    /**
     * Returns the lastname of this Contacts. The lastname field corresponds to
     * the database column sampledb.sampledb.contacts.lastname.
     * 
     * @return the lastname of this Contacts
     */
    Optional<String> getLastname();
    
    /**
     * Returns the telephone of this Contacts. The telephone field corresponds to
     * the database column sampledb.sampledb.contacts.telephone.
     * 
     * @return the telephone of this Contacts
     */
    Optional<String> getTelephone();
    
    /**
     * Returns the email of this Contacts. The email field corresponds to the
     * database column sampledb.sampledb.contacts.email.
     * 
     * @return the email of this Contacts
     */
    Optional<String> getEmail();
    
    /**
     * Returns the created of this Contacts. The created field corresponds to the
     * database column sampledb.sampledb.contacts.created.
     * 
     * @return the created of this Contacts
     */
    Timestamp getCreated();
    
    /**
     * Sets the id of this Contacts. The id field corresponds to the database
     * column sampledb.sampledb.contacts.id.
     * 
     * @param id to set of this Contacts
     * @return this Contacts instance
     */
    Contacts setId(Integer id);
    
    /**
     * Sets the firstname of this Contacts. The firstname field corresponds to
     * the database column sampledb.sampledb.contacts.firstname.
     * 
     * @param firstname to set of this Contacts
     * @return this Contacts instance
     */
    Contacts setFirstname(String firstname);
    
    /**
     * Sets the lastname of this Contacts. The lastname field corresponds to the
     * database column sampledb.sampledb.contacts.lastname.
     * 
     * @param lastname to set of this Contacts
     * @return this Contacts instance
     */
    Contacts setLastname(String lastname);
    
    /**
     * Sets the telephone of this Contacts. The telephone field corresponds to
     * the database column sampledb.sampledb.contacts.telephone.
     * 
     * @param telephone to set of this Contacts
     * @return this Contacts instance
     */
    Contacts setTelephone(String telephone);
    
    /**
     * Sets the email of this Contacts. The email field corresponds to the
     * database column sampledb.sampledb.contacts.email.
     * 
     * @param email to set of this Contacts
     * @return this Contacts instance
     */
    Contacts setEmail(String email);
    
    /**
     * Sets the created of this Contacts. The created field corresponds to the
     * database column sampledb.sampledb.contacts.created.
     * 
     * @param created to set of this Contacts
     * @return this Contacts instance
     */
    Contacts setCreated(Timestamp created);
}